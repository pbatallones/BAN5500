macro
View(macro)
plot(macro$REALDPI)
plot(macro$REALDPI,macro$REALCONS)
summary(lm(REALCONS~REALDPI,data=macro))
plot(macro$REALCONS,macro$REALGOVT)
summary(lm(REALGOVT~REALCONS,data=macro))
d<-c(1,2,3,4,5,6)
f=function(x){
if(x==1){
return(1/6)
}
else if(x==2){
return(1/6)
}
else if(x==3){
return(1/6)
}
else if(x==4){
return(1/6)
}
else if(x==5){
return(1/6)
}
return(0)
}
View(f)
View(f)
game<-sample(d, 1000, replace = TRUE, prob = sapply(d,f))
table(game)
summary(game)
avg_game<-c()
for(i in seq(1,length(game),1)){
if(i%%1000==0)
print(i)
mean_temp<-mean(game[1:i])
avg_game<-c(avg_game,mean_temp)
}
x<-1:1000
plot(x,avg_game,type="l",xlim = c(0,1000),ylim = c(-2,0))
par(new=TRUE)
plot(x,rep(-1,length(x)),col=2,ylim=c(-2,0),type="l")
sort(game) # sorts all values
f=function(x){
if(x==1){
return(1/6)
}
else if(x==2){
return(1/6)
}
else if(x==3){
return(1/6)
}
else if(x==4){
return(1/6)
}
else if(x==5){
return(1/6)
}
else if(x==6){
return(1/6)
}
return(0)
}
game<-sample(d, 1000, replace = TRUE, prob = sapply(d,f))
table(game)
summary(game)
avg_game<-c()
for(i in seq(1,length(game),1)){
if(i%%1000==0)
print(i)
mean_temp<-mean(game[1:i])
avg_game<-c(avg_game,mean_temp)
}
x<-1:1000
plot(x,avg_game,type="l",xlim = c(0,1000),ylim = c(-2,0))
plot(x,avg_game,type="l",xlim = c(0,1000),ylim = c(-2,0))
par(new=TRUE)
plot(x,rep(-1,length(x)),col=2,ylim=c(-2,0),type="l")
sort(game) # sorts all values
S<-c(-2,1)
f=function(x){
if(x==-2){
return(2/3)
}
else if(x==1){
return(1/3)
}
return(0)
}
game<-sample(S, 100000, replace = TRUE, prob = sapply(S,f))
table(game)
summary(game)
avg_game<-c()
for(i in seq(1,length(game),1)){
if(i%%1000==0)
print(i)
mean_temp<-mean(game[1:i])
avg_game<-c(avg_game,mean_temp)
}
d<-c(1,2,3,4,5,6)
f=function(x){
if(x==1){
return(1/6)
}
else if(x==2){
return(1/6)
}
else if(x==3){
return(1/6)
}
else if(x==4){
return(1/6)
}
else if(x==5){
return(1/6)
}
else if(x==6){
return(1/6)
}
return(0)
}
throws<-sample(d, 1000, replace = TRUE, prob = sapply(d,f))
table(throws)
summary(throws)
plot(throws)
hist(throws)
d<-c(1,2,3,4,5,6)
f=function(x){
if(x==1){
return(1/6)
}
else if(x==2){
return(1/6)
}
else if(x==3){
return(1/6)
}
else if(x==4){
return(1/6)
}
else if(x==5){
return(1/6)
}
else if(x==6){
return(1/6)
}
return(0)
}
throws<-sample(d, 1000, replace = TRUE, prob = sapply(d,f))
n<-c(1:1000)
?replace
table(throws)
summary(throws)
throws_6 <- ifelse(d=="6", 1,0)
sum(throws
6[seq(1,x,1)]
}
)
sum(throws
6[seq(1,x,1)])
ctv_count<-sapply(n,f){
sum(throws_6)[seq(1,x,1)]
}
ctv_count<-sapply(n,function(x){sum(throws_6[seq(1,x,1)]})
ctv_count<-sapply(n,function(x)sum(throws_6[seq(1,x,1)])
ctv_count<-sapply(n,f)sum(throws_6[seq(1,x,1)])
?sapply
table(throws_6)
throws_6 <- ifelse(throws=="6", 1,0)
table(throws_6)
ctv_count<-sapply(n,function(x){sum(throws_6[seq(1,x,1)]})
ctv_count<-sapply(n,f{sum(throws_6[seq(1,x,1)]}))
ctv_count<-sapply(n,f(sum(throws_6[seq(1,x,1)]))
table(throws_6)
?seq
ctv_count<-sapply(n,f{
sum(throws_6[seq(1,x,1)])
})
ctv_count<-sapply(n,f(x)
sum(throws_6[seq(1,x,1)])
})
throws_6
View(f)
View(f)
n
d<-sample(1:6, size = 1000, replace = TRUE)
d
throws<-sample(1:6, size = 1000, replace = TRUE)
hist(throws)
n<-c(1:1000)
throws<-sample(1:6, size = 1000, replace = TRUE)
n<-c(1:1000)
throws6 <- ifelse(throws=="6", 1,0)
ctv_count<-sapply(n,function(x){sum(throws_6[seq(1,x,1)]})
?sum
?seq
?sapply
d<-c(1,2,3,4,5,6)
f=function(x){
if(x==1){
return(1/6)
}
else if(x==2){
return(1/6)
}
else if(x==3){
return(1/6)
}
else if(x==4){
return(1/6)
}
else if(x==5){
return(1/6)
}
else if(x==6){
return(1/6)
}
return(0)
}
throws<-sample(d, 1000, replace = TRUE, prob = sapply(d,f))
table(throws)
summary(throws)
hist(throws)
n<-c(1:1000)
throws_6 <- ifelse(throws=="6", 1,0)
throws_6
count<-sapply(n,"f"
sum(throws
6[seq(1,x,1)]
}
)
count<-sapply(n,"f"
{
sum(throws
6[seq(1,x,1)]
}
))
ctv_count<-sapply(n,"f"
{
sum(throws
6[seq(1,x,1)]
}
))
throws<-sample(1:6, size = 1000, replace = TRUE)
n<-c(1:1000)
(throws=="6", 1,0)
throws<-sample(1:6, size = 1000, replace = TRUE)
throws<-sample(1:6, size = 1000, replace = TRUE)
n<-c(1:1000)
throws_6 <- ifelse(throws=="6", 1,0)
ctv_count<-sapply(n,function(x)){
sum(throws_6[seq(1,x,1)])
})
ctv_count<-sapply(n,function(x){
sum(throws_6[seq(1,x,1)])
})
ctv_count
throws_6
plot(ctv_count)
throws
throws_6
gender<-c("female","male","male","male","male")
gpa<-c(4.0,3.7,3.9,3.2,3.1)
state<-c("NJ","NY","CT","NJ","NJ")
data<-date.frame(gender,gpa,state)
data<-data.frame(gender,gpa,state)
mean(gpa)
median(gpa)
line(gpa)
summary(gpa)
summary(gender)
count(gender)
summary(as.factor(gender))
summary(as.factor(gender))/length(gender)
summary(as.factor(state))/length(state)
max(gpa)-min(gpa)
var(gpa)
sd(gpa)
quantile(gpa,.95)
data_sample<-data[c(1,3,4,5)]
data_sample<-data[c(1,3,4,5),]
mean(data_sample)
mean(data_sample$gpa)
population<-1:5
samples<-list()
for(i in 1:5){
samples[[i]]<-population[-i]
}
sammples
samples
gpa_means<-list()
for(i in 1:5){
the_sample<-samples[[i]]
gpas<-data(the_sample,"gpa")
gpa_means[[i]]<-gpas
}
gpas<-data[the_sample,"gpa"]
gpa_means
gpa_means<-list()
for(i in 1:5){
the_sample<-samples[[i]]
gpas<-data[the_sample,"gpa"]
gpa_means[[i]]<-gpas
}
gpa_means
lapply(gpa_means,mean)
the_gpas<-lapply(gpa_means,mean)
the_gpas<-unlist(the_gpas)
hist(the_gpas)
mean(the_gpas)
install.packages("quantmod")
library(quantmod)
aapl<-getSymbols("AAPL",auto.assign = FALSE)
View(aapl)
close<-aapl$AAPL.Close
close<-as.numeric(aapl$AAPL.Close)
close_diff<-diff(close)
close_diff
summary(close_diff)
sd(close_diff)
var(close_diff)
hist(close_diff)
hist(close_diff,break=50)
hist(close_diff,breaks=50)
m<-mean(close_diff)
s<-sd(close_diff)
txlim<-c(-10,10)
tylim<-c(0,5)
hist(close_diff,breaks=50,xlim=txlim,ylim=tylim)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
hist(close_diff,breaks=50,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
tylim<-c(0,.5)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
txlim<-c(-10,10)
tylim<-c(0,.5)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
summary(close_diff)
sd(close_diff)
var(close_diff)
txlim<-c(-10,10)
tylim<-c(0,.5)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
ks.test(close_diff,"pnorm")
ks.test(close_diff,"pnorm",m,s)
ks.test(close_diff,"pnorm",m,s)
ks.test(close_diff,"pnorm",m,s)
aapl<-getSymbols("AAPL",auto.assign = FALSE)
close<-as.numeric(aapl$AAPL.Close)
close_diff<-diff(close)
summary(close_diff)
sd(close_diff)
var(close_diff)
txlim<-c(-10,10)
tylim<-c(0,.5)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
hist(close_diff,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
ks.test(close_diff,"pnorm",m,s)
aapl<-getSymbols("AAPL",auto.assign = FALSE)
close<-as.numeric(aapl$AAPL.Close)
close_diff<-diff(close)
summary(close_diff)
library(quantmod)
aapl<-getSymbols("AAPL",auto.assign = FALSE)
close<-as.numeric(aapl$AAPL.Close)
close_diff<-diff(close)
summary(close_diff)
sd(close_diff)
var(close_diff)
txlim<-c(-10,10)
tylim<-c(0,.5)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
ks.test(close_diff,"pnorm")
tylim<-c(0,10)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
tylim<-c(0,100)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
tylim<-c(0,10000)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
tylim<-c(0,1000)
hist(close_diff,breaks=20,xlim=txlim,ylim=tylim)
m<-mean(close_diff)
s<-sd(close_diff)
x<-seq(-10,10,.5)
y<-dnorm(x,m,s)
par(new=TRUE)
plot(x,y,type="l",xlim=txlim,ylim=tylim,col=2)
ks.test(close_diff,"pnorm")
f = function(-x^3 + x^2 +5x)
f = function("-x^3 + x^2 +5x")
f = function(-x^3 + x^2 +5x)
f = function(x^3 + x^2 +5x)
f = function(x){-x^3+x^2+5x}
-x^3 + x^2 + 5x
B = 100
x = 365
B(1+r)^x
y(1+r)^x
?function
?function
asdf
library(rmutil)
#loading dplyr for normality testing with Shapiro-Wilk test for comparison
library(dplyr)
library(ggpubr)
#Helper Function
MAD=function(x){sum(abs(x-median(x)))/length(x)}
#set working directory: specify the folder path where your csv file is:
setwd("c:/users/pbata/OneDrive/Documents/BAN 5500")
getwd
#Using file.choose to make finding data file easier
data<-read.csv(file.choose())
#Viewing the data summary
summary(data)
View(data)
open<-as.numeric(data$JPM.Open)
high<-as.numeric(data$JPM.High)
low<-as.numeric(data$JPM.Low)
close<-as.numeric(data$JPM.Close)
open
#Pulling the means from each variable
Open_mean<-mean(data$JPM.Open)
High_mean<-mean(data$JPM.High)
Low_mean<-mean(data$JPM.Low)
Close_mean<-mean(data$JPM.Close)
Open_mean
#The range of the variables
Open_range<-diff(range(data$JPM.Open))
High_range<-diff(range(data$JPM.High))
Low_range<-diff(range(data$JPM.Low))
Close_range<-diff(range(data$JPM.Close))
#variance of the variables
var<-var(data)
#standard deviation of the variables
OpenSD<-sd(data$JPM.Open)
HighSD<-sd(data$JPM.High)
LowSD<-sd(data$JPM.Low)
CloseSD<-sd(data$JPM.Close)
#Using par(mfrow=c(2,2)) command to see all histograms
par(mfrow=c(2,2))
hist(data$JPM.Open)
hist(data$JPM.High)
hist(data$JPM.Low)
hist(data$JPM.Close)
Open_mean
OpenSD
High_mean
HighSD
Low_mean
LowSD
Close_mean
CloseSD
ks.test(open, "pnorm")
ks.test(high, "pnorm")
ks.test(low, "pnorm")
ks.test(close, "pnorm")
shapiro.test(open)
shapiro.test(high)
shapiro.test(low)
shapiro.test(close)
#Viewing quantile-quantile distribtion for each variable
qqnorm(open)
qqnorm(high)
qqnorm(low)
qqnorm(close)
mopen<-MAD(open)
mhigh<-MAD(high)
mlow<-MAD(low)
mclose<-MAD(close)
ks.test(open, "pnorm", mopen)
ks.test(close, "pnorm", mclose)
ks.test(high, "pnorm", mhigh)
ks.test(low, "pnorm", mlow)
View(data)
